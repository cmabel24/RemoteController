<p> 
The code is setup in a way that there is a chain of tasks happening from the top. This means that it is easier to follow what is happening in the code by searching up what the tasks do.
The code was made using nanopb which is a program that can be used to back buffers for what the remote control does while also limiting the amout of data that is sent to the rover and controller.
The rover is connected to the remote control by 2 Xbees that are bouncing information of one another such as the buffer and the Rover tellemetry. Eventaully all the Rover Tellemetry will be moved
to a OlED screen that I can mount on the remote control to find out what the current output is and the direction or faults that are triggered. The faults are what put the program into a stoppin point
what I mean by that is that it stops the rest of the code from running as a error occured that needs to be fixed later. By fixing it is moving closer or fixing an error in the code with it not running 
the way that I intended. The code also has a deadzone with the controller that does not take inputs in a certain range and it caps at 400 for either side which stops the numbers from getting to high
as the rover only takes inputs from 0 to 400 for the speed it will go. The code also uses something called task scheduler to manage what is happening when and it makes everything much easier.
Task scheduler also cleans up the code that I had used to make it run faster and more effieciently with the arduino that I am using without wasting to many proccesing cycles. 
<p>